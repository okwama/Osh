import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:woosh/models/order/my_order_model.dart';
import 'package:woosh/models/order/orderitem_model.dart';
import 'package:woosh/models/Products_Inventory/price_option_model.dart';
import 'package:woosh/services/core/order_service.dart';
import 'package:woosh/pages/order/updateOrder_page.dart';
import 'package:woosh/utils/image_utils.dart';
import 'package:woosh/utils/date_utils.dart' as custom_date;
import 'package:woosh/utils/country_currency_labels.dart';
import 'package:get_storage/get_storage.dart';

class OrderDetailPage extends StatefulWidget {
  final MyOrderModel? order;

  const OrderDetailPage({
    super.key,
    required this.order,
  });

  @override
  State<OrderDetailPage> createState() => _OrderDetailPageState();
}

class _OrderDetailPageState extends State<OrderDetailPage> {
  bool _isUpdating = false;
  List<OrderItem> _orderItems = [];
  Map<String, dynamic>? _voidStatus;

  final currencyFormat = NumberFormat.currency(
    locale: 'en_KE',
    symbol: 'Ksh ',
    decimalDigits: 2,
  );

  @override
  void initState() {
    super.initState();
    _loadOrderItems();
    _checkVoidStatus();
  }

  Future<void> _loadOrderItems() async {
    try {
      final items = await OrderService.getOrderItems(widget.order!.id);
      if (mounted) {
        setState(() {
          _orderItems = items;
        });
      }
    } catch (e) {
      print('Error loading order items: $e');
    }
  }

  Future<void> _checkVoidStatus() async {
    try {
      final status =
          await OrderService.checkVoidStatus(orderId: widget.order!.id);
      if (mounted) {
        setState(() {
          _voidStatus = status;
        });
      }
    } catch (e) {
      // Silently fail - void status is optional
      print('Error checking void status: $e');
    }
  }

  String _getVoidStatusMessage() {
    if (_voidStatus == null) return '';

    final status = _voidStatus!['status'] as int? ?? 0;
    switch (status) {
      case 0:
        return '';
      case 4:
        return 'Void Requested';
      case 5:
        return 'Order Voided';
      case 6:
        return 'Void Rejected';
      default:
        return 'Unknown';
    }
  }

  Color _getVoidStatusColor() {
    if (_voidStatus == null) return Colors.transparent;

    final status = _voidStatus!['status'] as int? ?? 0;
    switch (status) {
      case 0:
        return Colors.transparent;
      case 4:
        return Colors.orange;
      case 5:
        return Colors.red;
      case 6:
        return Colors.grey;
      default:
        return Colors.grey;
    }
  }

  // Get status color based on order status
  Color _getStatusColor(int status) {
    switch (status) {
      case 0:
        return Colors.orange; // pending
      case 1:
        return Colors.blue; // confirmed
      case 2:
        return Colors.purple; // processing
      case 3:
        return Colors.indigo; // shipped
      case 4:
        return Colors.green; // delivered
      case 5:
      case 6:
        return Colors.red; // cancelled/voided
      default:
        return Colors.grey;
    }
  }

  // Get status icon based on order status
  IconData _getStatusIcon(int status) {
    switch (status) {
      case 0:
        return Icons.schedule; // pending
      case 1:
        return Icons.check_circle_outline; // confirmed
      case 2:
        return Icons.refresh; // processing
      case 3:
        return Icons.local_shipping; // shipped
      case 4:
        return Icons.check_circle; // delivered
      case 5:
      case 6:
        return Icons.cancel; // cancelled/voided
      default:
        return Icons.help_outline;
    }
  }

  // Get status text based on order status
  String _getStatusText(int status) {
    switch (status) {
      case 0:
        return 'Pending (Can be modified)';
      case 1:
        return 'Confirmed';
      case 2:
        return 'Processing';
      case 3:
        return 'Shipped';
      case 4:
        return 'Delivered';
      case 5:
        return 'Cancelled';
      case 6:
        return 'Voided';
      default:
        return 'Unknown';
    }
  }

  Future<void> _deleteOrder() async {
    try {
      final confirmed = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          title: Row(
            children: [
              Icon(Icons.delete_forever, color: Colors.red, size: 24),
              const SizedBox(width: 8),
              const Text('Delete Order', style: TextStyle(fontSize: 16)),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Are you sure you want to delete this order?',
                style: TextStyle(fontSize: 14),
              ),
              const SizedBox(height: 12),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.red.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Order #${widget.order!.id}',
                      style: const TextStyle(
                          fontWeight: FontWeight.bold, fontSize: 13),
                    ),
                    Text(
                      'Amount: ${CountryCurrencyLabels.formatCurrency(widget.order!.totalAmount, null)}',
                      style: const TextStyle(fontSize: 12),
                    ),
                    const SizedBox(height: 4),
                    const Text(
                      'This action cannot be undone!',
                      style: TextStyle(
                          color: Colors.red,
                          fontSize: 11,
                          fontWeight: FontWeight.w600),
                    ),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Cancel', style: TextStyle(fontSize: 13)),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8)),
                padding:
                    const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              ),
              child: const Text('Delete Order', style: TextStyle(fontSize: 13)),
            ),
          ],
        ),
      );

      if (confirmed == true) {
        setState(() => _isUpdating = true);

        // Delete order
        final result = await OrderService.deleteOrder(widget.order!.id);

        if (result['success'] == true) {
          // Show success message with more details
          Get.snackbar(
            '✅ Order Deleted',
            'Order #${widget.order!.id} has been successfully deleted',
            snackPosition: SnackPosition.TOP,
            backgroundColor: Colors.green,
            colorText: Colors.white,
            duration: const Duration(seconds: 3),
            icon: const Icon(Icons.check_circle, color: Colors.white),
            margin: const EdgeInsets.all(8),
            borderRadius: 8,
          );

          // Navigate back with success result
          Get.back(result: true);
        } else {
          throw Exception(result['message'] ?? 'Failed to delete order');
        }
      }
    } catch (e) {
      Get.snackbar(
        '❌ Delete Failed',
        'Failed to delete order: $e',
        snackPosition: SnackPosition.TOP,
        backgroundColor: Colors.red,
        colorText: Colors.white,
        duration: const Duration(seconds: 4),
        icon: const Icon(Icons.error, color: Colors.white),
        margin: const EdgeInsets.all(8),
        borderRadius: 8,
      );
    } finally {
      if (mounted) {
        setState(() => _isUpdating = false);
      }
    }
  }

  Future<void> _voidOrder() async {
    try {
      final confirmed = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          title: Row(
            children: [
              Icon(Icons.warning_amber_rounded, color: Colors.orange, size: 24),
              const SizedBox(width: 8),
              const Text('Request Order Void', style: TextStyle(fontSize: 16)),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                  'Are you sure you want to request a void for this order?',
                  style: TextStyle(fontSize: 14)),
              const SizedBox(height: 12),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('Order #${widget.order!.id}',
                        style: const TextStyle(
                            fontWeight: FontWeight.bold, fontSize: 13)),
                    Text(
                        'Amount: ${CountryCurrencyLabels.formatCurrency(widget.order!.totalAmount, null)}',
                        style: const TextStyle(fontSize: 12)),
                  ],
                ),
              ),
              const SizedBox(height: 8),
              const Text(
                'This will submit a void request for admin approval.',
                style: TextStyle(color: Colors.orange, fontSize: 11),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Cancel', style: TextStyle(fontSize: 13)),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8)),
                padding:
                    const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              ),
              child: const Text('Request Void', style: TextStyle(fontSize: 13)),
            ),
          ],
        ),
      );

      if (confirmed == true) {
        setState(() => _isUpdating = true);

        // Submit void request to API
        final result = await OrderService.requestOrderVoid(
          orderId: widget.order!.id,
          reason: 'Customer requested void',
        );

        if (result['success'] == true) {
          Get.snackbar(
            'Success',
            'Void request submitted successfully. Waiting for admin approval.',
            snackPosition: SnackPosition.TOP,
            backgroundColor: Colors.green,
            colorText: Colors.white,
            duration: const Duration(seconds: 3),
          );

          // Refresh void status
          await _checkVoidStatus();

          Get.back(result: true);
        } else {
          throw Exception('Failed to submit void request');
        }
      }
    } catch (e) {
      Get.snackbar(
        'Error',
        'Failed to submit void request: $e',
        snackPosition: SnackPosition.TOP,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    } finally {
      if (mounted) {
        setState(() => _isUpdating = false);
      }
    }
  }

  Future<void> _updateOrder() async {
    if (_isUpdating) return;

    setState(() => _isUpdating = true);

    try {
      // Note: Order update functionality is simplified for now
      // Full implementation would require more complex logic
      Get.snackbar(
        'Info',
        'Order update functionality is being implemented',
        snackPosition: SnackPosition.TOP,
        backgroundColor: Colors.blue,
        colorText: Colors.white,
        duration: const Duration(seconds: 2),
      );
    } catch (e) {
      Get.snackbar(
        'Error',
        'An error occurred: $e',
        snackPosition: SnackPosition.TOP,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    } finally {
      if (mounted) {
        setState(() => _isUpdating = false);
      }
    }
  }

  void _updateOrderItemQuantity(OrderItem item, int newQuantity) {
    setState(() {
      final index = _orderItems.indexOf(item);
      if (index != -1) {
        _orderItems[index] = OrderItem(
          id: item.id,
          productId: item.productId,
          quantity: newQuantity,
          product: item.product,
          priceOptionId: item.priceOptionId,
        );
      }
    });
  }

  void _removeOrderItem(OrderItem item) {
    setState(() {
      _orderItems.remove(item);
    });
  }

  double get totalAmount {
    return _orderItems.fold(0.0, (sum, item) {
      final product = item.product;
      if (product == null) return sum;

      // Find the specific price option that was selected for this item
      final priceOption = product.priceOptions.firstWhere(
        (po) => po.id == item.priceOptionId,
        orElse: () =>
            product.priceOptions.firstOrNull ??
            PriceOptionModel(id: 0, option: '', value: 0, categoryId: 1),
      );

      return sum + (priceOption.value.toDouble() * item.quantity);
    });
  }

  void _navigateToUpdateOrder() async {
    if (widget.order == null) return;

    try {
      // Check if order can be updated
      final canUpdate = await OrderService.canUpdateOrder(widget.order!.id);

      if (!canUpdate) {
        Get.snackbar(
          'Cannot Update',
          'This order cannot be updated. Only pending orders can be modified.',
          snackPosition: SnackPosition.TOP,
          backgroundColor: Colors.orange,
          colorText: Colors.white,
          duration: const Duration(seconds: 3),
        );
        return;
      }

      // Navigate to update page
      final result = await Get.to(
        () => UpdateOrderPage(order: widget.order!),
        transition: Transition.rightToLeft,
      );

      // Refresh order data if update was successful
      if (result == true) {
        // Refresh the current order data
        final updatedOrder = await OrderService.getOrderById(widget.order!.id);
        if (updatedOrder != null) {
          setState(() {
            // Update the order data
            // Note: You might need to modify this based on your widget structure
          });
        }

        Get.snackbar(
          'Success',
          'Order updated successfully',
          snackPosition: SnackPosition.TOP,
          backgroundColor: Colors.green,
          colorText: Colors.white,
          duration: const Duration(seconds: 2),
        );
      }
    } catch (e) {
      Get.snackbar(
        'Error',
        'Failed to navigate to order editor: $e',
        snackPosition: SnackPosition.TOP,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (widget.order == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Order Details'),
          backgroundColor: Theme.of(context).primaryColor,
          foregroundColor: Colors.white,
        ),
        body: const Center(
          child: Text('Order not found'),
        ),
      );
    }

    final order = widget.order!;
    final statusColor = _getStatusColor(order.status);
    final statusIcon = _getStatusIcon(order.status);
    final isPending = order.status == 0; // Check for integer 0
    final canVoid = isPending && (_voidStatus?['canRequestVoid'] ?? true);
    final voidStatusMessage = _getVoidStatusMessage();
    final voidStatusColor = _getVoidStatusColor();

    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        title: Text('Order #${order.id}', style: const TextStyle(fontSize: 18)),
        backgroundColor: Theme.of(context).primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: CustomScrollView(
        slivers: [
          SliverPadding(
            padding: const EdgeInsets.all(16),
            sliver: SliverList(
              delegate: SliverChildListDelegate([
                // Order Header
                _buildSectionHeader(context, 'Order Summary'),
                _buildOrderInfoCard(context),
                const SizedBox(height: 24),

                // Items List
                _buildSectionHeader(context, 'Items (${_orderItems.length})'),
                if (_orderItems.isEmpty)
                  _buildEmptyState()
                else
                  ..._orderItems.map((item) => _buildOrderItemTile(item)),

                // Total Amount Section
                const SizedBox(height: 24),
                _buildTotalSection(context, totalAmount),
              ]),
            ),
          ),
        ],
      ),
      bottomNavigationBar: _buildBottomBar(context),
    );
  }

  Widget _buildSectionHeader(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Text(
        title,
        style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.w600,
            ),
      ),
    );
  }

  Widget _buildOrderInfoCard(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      padding: const EdgeInsets.all(12),
      child: Column(
        children: [
          _buildInfoRow('Order Date',
              custom_date.DateUtils.formatDateTime(widget.order!.orderDate)),
          const Divider(height: 16),
          _buildInfoRow('Outlet', widget.order!.clientId.toString()),
          const Divider(height: 16),
          _buildInfoRow('Status', _getStatusText(widget.order!.status)),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: const TextStyle(
              color: Colors.grey,
              fontSize: 12,
            ),
          ),
          Text(
            value,
            style: const TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderItemTile(OrderItem item) {
    final product = item.product;
    final priceOptions = product?.priceOptions ?? [];
    final currentPriceOption = priceOptions.firstWhere(
      (po) => po.id == item.priceOptionId,
      orElse: () =>
          priceOptions.firstOrNull ??
          PriceOptionModel(id: 0, option: '', value: 0, categoryId: 1),
    );

    final itemTotal = currentPriceOption.value.toDouble() * item.quantity;
    final isPending = widget.order!.status == 0;

    return Container(
      margin: const EdgeInsets.only(bottom: 6),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
      ),
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 12,
          vertical: 8,
        ),
        dense: true,
        leading: Container(
          width: 40,
          height: 40,
          decoration: BoxDecoration(
            color: Colors.grey.shade100,
            borderRadius: BorderRadius.circular(6),
          ),
          child: const Icon(
            Icons.shopping_bag_outlined,
            color: Colors.grey,
            size: 20,
          ),
        ),
        title: Text(
          product?.name ?? 'Product #${item.productId}',
          style: const TextStyle(
            fontWeight: FontWeight.w500,
            fontSize: 13,
          ),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Qty: ${item.quantity} × ${CountryCurrencyLabels.formatCurrency(currentPriceOption.value.toDouble(), null)}',
              style: const TextStyle(fontSize: 12, color: Colors.grey),
            ),
            Text(
              'Total: ${CountryCurrencyLabels.formatCurrency(itemTotal.toDouble(), null)}',
              style: const TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: Colors.green),
            ),
          ],
        ),
        trailing: isPending
            ? IconButton(
                icon: const Icon(Icons.delete_outline,
                    size: 20, color: Colors.red),
                onPressed: () => _removeOrderItem(item),
              )
            : null,
      ),
    );
  }

  Widget _buildEmptyState() {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 24),
      child: Column(
        children: [
          Icon(
            Icons.shopping_basket_outlined,
            size: 36,
            color: Colors.grey.shade300,
          ),
          const SizedBox(height: 12),
          Text(
            'No items in this order',
            style: TextStyle(
              color: Colors.grey.shade500,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTotalSection(BuildContext context, double totalAmount) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      padding: const EdgeInsets.all(12),
      child: Column(
        children: [
          _buildTotalRow(context, 'Subtotal', totalAmount),
          const Divider(height: 12),
          _buildTotalRow(context, 'Tax', 0.0),
          const Divider(height: 12),
          _buildTotalRow(
            context,
            'Total',
            totalAmount,
            isTotal: true,
          ),
        ],
      ),
    );
  }

  Widget _buildTotalRow(BuildContext context, String label, double amount,
      {bool isTotal = false}) {
    // Get user's country ID for currency formatting
    final box = GetStorage();
    final salesRep = box.read('salesRep');
    final userCountryId = salesRep?['countryId'];

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              fontSize: isTotal ? 14 : 12,
              fontWeight: isTotal ? FontWeight.w600 : FontWeight.normal,
              color: isTotal ? Theme.of(context).primaryColor : Colors.grey,
            ),
          ),
          Text(
            CountryCurrencyLabels.formatCurrency(amount, userCountryId),
            style: TextStyle(
              fontSize: isTotal ? 14 : 12,
              fontWeight: isTotal ? FontWeight.w600 : FontWeight.normal,
              color: isTotal ? Theme.of(context).primaryColor : Colors.black,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomBar(BuildContext context) {
    final order = widget.order!;
    final isPending = order.status == 0; // Check for integer 0
    final canVoid = isPending && (_voidStatus?['canRequestVoid'] ?? true);
    final voidStatusMessage = _getVoidStatusMessage();
    final voidStatusColor = _getVoidStatusColor();

    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        children: [
          if (isPending) ...[
            // Delete button for pending orders
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _isUpdating ? null : _deleteOrder,
                icon: const Icon(Icons.delete_forever, size: 16),
                label:
                    const Text('Delete Order', style: TextStyle(fontSize: 13)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.red.shade700,
                  side: BorderSide(color: Colors.red.shade300),
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8)),
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
            const SizedBox(width: 8),
          ],
          if (canVoid) ...[
            Expanded(
              child: OutlinedButton.icon(
                onPressed: _isUpdating ? null : _voidOrder,
                icon: const Icon(Icons.block, size: 16),
                label:
                    const Text('Request Void', style: TextStyle(fontSize: 13)),
                style: OutlinedButton.styleFrom(
                  foregroundColor: Colors.orange.shade700,
                  side: BorderSide(color: Colors.orange.shade300),
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8)),
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
            ),
            const SizedBox(width: 8),
          ] else if (voidStatusMessage.isNotEmpty) ...[
            Expanded(
              child: Container(
                padding:
                    const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
                decoration: BoxDecoration(
                  color: voidStatusColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: voidStatusColor.withOpacity(0.3)),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(
                      voidStatusColor == Colors.orange
                          ? Icons.schedule
                          : voidStatusColor == Colors.red
                              ? Icons.cancel
                              : Icons.help_outline,
                      size: 14,
                      color: voidStatusColor,
                    ),
                    const SizedBox(width: 4),
                    Flexible(
                      child: Text(
                        voidStatusMessage,
                        style: TextStyle(
                          color: voidStatusColor,
                          fontWeight: FontWeight.w500,
                          fontSize: 11,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(width: 8),
          ],
          Expanded(
            child: ElevatedButton.icon(
              onPressed:
                  isPending && !_isUpdating ? _navigateToUpdateOrder : null,
              icon: _isUpdating
                  ? const SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor:
                              AlwaysStoppedAnimation<Color>(Colors.white)))
                  : const Icon(Icons.edit, size: 16),
              label: Text(
                _isUpdating
                    ? 'Updating...'
                    : isPending
                        ? 'Modify Order'
                        : 'Order Locked',
                style: const TextStyle(fontSize: 13),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor:
                    isPending ? Theme.of(context).primaryColor : Colors.grey,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8)),
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
