import 'package:flutter/material.dart';
import 'package:woosh/models/leaves/leave_model.dart';
import 'package:woosh/services/core/leave_service.dart';
import 'package:woosh/pages/Leave/leaveapplication_page.dart';
import 'package:woosh/pages/Leave/leave_requests_page.dart';
import 'package:intl/intl.dart';
import 'package:get_storage/get_storage.dart';
import 'package:woosh/services/core/leave_balance_service.dart';
import 'package:woosh/utils/app_theme.dart';

// Enhanced Color Scheme Constants
const Color primaryGreen = Color(0xFF87DC75);
const Color primaryDark = Color(0xFF625D4D);
const Color successGreen = Color(0xFF22BF02);
const Color baseGray = Color(0xFF4C483C);
const Color pureWhite = Color(0xFFFFFFFF);
const Color cardBackground = Color(0xFFFAFAFA);
const Color lightGray = Color(0xFFE0E0E0);

class LeaveDashboardPage extends StatefulWidget {
  const LeaveDashboardPage({super.key});

  @override
  _LeaveDashboardPageState createState() => _LeaveDashboardPageState();
}

class _LeaveDashboardPageState extends State<LeaveDashboardPage> {
  bool _isLoading = true;
  String? _error;
  List<Map<String, dynamic>> _leaveBalances = [];
  Map<String, dynamic> _leaveStats = {};
  final int _currentYear = DateTime.now().year;

  @override
  void initState() {
    super.initState();
    _loadDashboardData();
    _debugAuthStatus();
  }

  void _debugAuthStatus() {
    final box = GetStorage();
    final userId = box.read('userId');
    final userData = box.read('salesRep');
    final token = box.read('authToken');

    print('üîç Auth Debug Info:');
    print('   User ID exists: ${userId != null}');
    print('   User data exists: ${userData != null}');
    print('   Token exists: ${token != null}');
    print('   Direct storage user ID: $userId');
    print('   User data ID: ${userData?['id']}');
  }

  Future<void> _loadDashboardData() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      final box = GetStorage();
      final userId = box.read('userId');
      int? staffId;

      if (userId != null) {
        staffId = userId is int ? userId : int.tryParse(userId.toString());
      } else {
        final userData = box.read('salesRep');
        if (userData is Map<String, dynamic> && userData['id'] != null) {
          staffId = userData['id'] is int
              ? userData['id']
              : int.tryParse(userData['id'].toString());
        }
      }

      print('üîç Debug: User ID from storage: $userId');
      print('üîç Debug: Staff ID resolved: $staffId');

      if (staffId == null || staffId == 0) {
        setState(() {
          _error = 'No user data found. Please login again.';
          _isLoading = false;
        });
        return;
      }

      print('‚úÖ Loading leave dashboard for staff ID: $staffId');

      // First sync the leave balances to ensure accuracy
      await LeaveBalanceService.syncLeaveBalances(staffId, _currentYear);

      final results = await Future.wait([
        LeaveBalanceService.getStaffLeaveBalances(staffId, _currentYear)
            .then((balances) {
          print('üîç Debug: Loaded ${balances.length} leave balances');
          for (final balance in balances) {
            print(
                '   - ${balance.leaveType?.name}: ${balance.accrued} accrued, ${balance.used} used');
          }
          return balances
              .map((balance) => {
                    'balance': balance,
                    'leaveType': balance.leaveType,
                  })
              .toList();
        }),
        LeaveService.getLeaveStats(staffId, _currentYear),
      ]);

      setState(() {
        _leaveBalances = results[0] as List<Map<String, dynamic>>;
        _leaveStats = results[1] as Map<String, dynamic>;
        _isLoading = false;
      });

      print(
          '‚úÖ Dashboard loaded: ${_leaveBalances.length} balances, ${_leaveStats.length} stats');
    } catch (e) {
      print('‚ùå Error in _loadDashboardData: $e');
      setState(() {
        _error = 'Failed to load dashboard data: $e';
        _isLoading = false;
      });
    }
  }

  Widget _buildQuickStatsSection() {
    return Container(
      margin: const EdgeInsets.all(16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            primaryGreen.withOpacity(0.1),
            primaryDark.withOpacity(0.05)
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: primaryGreen.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Year $_currentYear Overview',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: primaryDark,
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: primaryGreen.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  DateFormat('MMM yyyy').format(DateTime.now()),
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w600,
                    color: primaryDark,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            children: [
              Expanded(
                child: _buildQuickStatCard(
                  'Days Taken',
                  _leaveStats['total_days_approved']?.toStringAsFixed(1) ?? '0',
                  Icons.calendar_today,
                  Colors.purple,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickStatCard(
                  'Applications',
                  _leaveStats['total_applications']?.toString() ?? '0',
                  Icons.description,
                  Colors.blue,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildQuickStatCard(
                  'Pending',
                  _leaveStats['pending_applications']?.toString() ?? '0',
                  Icons.pending,
                  Colors.orange,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildQuickStatCard(
      String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: pureWhite,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Icon(icon, color: color, size: 20),
          const SizedBox(height: 6),
          Text(
            value,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(
            label,
            style: TextStyle(
              fontSize: 10,
              color: Colors.grey[600],
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildCompactLeaveBalanceCard(
      LeaveBalance balance, LeaveType leaveType) {
    // Use the actual accrued balance from database instead of maxDaysPerYear
    final totalEntitlement = balance.accrued + balance.carriedForward;
    final remainingDays = totalEntitlement - balance.used;
    final progress =
        totalEntitlement > 0 ? remainingDays / totalEntitlement : 0.0;

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: pureWhite,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
        border: Border.all(color: lightGray.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(6),
                      decoration: BoxDecoration(
                        color: primaryGreen.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        leaveType.requiresAttachment
                            ? Icons.attach_file
                            : Icons.event,
                        size: 16,
                        color: primaryGreen,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            leaveType.name,
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                              color: primaryDark,
                            ),
                          ),
                          Text(
                            '${balance.accrued.toStringAsFixed(1)} days accrued',
                            style: TextStyle(
                              fontSize: 11,
                              color: Colors.grey[600],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    remainingDays.toStringAsFixed(1),
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: remainingDays > 0 ? successGreen : Colors.red,
                    ),
                  ),
                  Text(
                    'remaining',
                    style: TextStyle(
                      fontSize: 10,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 12),
          LinearProgressIndicator(
            value: progress,
            backgroundColor: lightGray.withOpacity(0.3),
            valueColor: AlwaysStoppedAnimation<Color>(
              progress > 0.3 ? successGreen : Colors.orange,
            ),
            minHeight: 4,
          ),
          const SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              _buildBalanceDetail(
                  'Used', balance.used.toString(), Colors.grey[700]!),
              if (balance.carriedForward > 0)
                _buildBalanceDetail(
                    'Carried', balance.carriedForward.toString(), successGreen),
              if (leaveType.accrues)
                _buildBalanceDetail(
                    'Accrued', balance.accrued.toString(), primaryGreen),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildBalanceDetail(String label, String value, Color color) {
    return Column(
      children: [
        Text(
          value,
          style: TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.bold,
            color: color,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 10,
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }

  Widget _buildActionButtons() {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          Expanded(
            child: ElevatedButton.icon(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const LeaveApplicationPage(),
                  ),
                ).then((value) {
                  if (value == true) {
                    _loadDashboardData();
                  }
                });
              },
              icon: const Icon(Icons.add, size: 18),
              label: const Text('Apply Leave'),
              style: ElevatedButton.styleFrom(
                backgroundColor: primaryGreen,
                foregroundColor: pureWhite,
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: OutlinedButton.icon(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const LeaveRequestsPage(),
                  ),
                );
              },
              icon: const Icon(Icons.history, size: 18),
              label: const Text('History'),
              style: OutlinedButton.styleFrom(
                foregroundColor: primaryGreen,
                side: BorderSide(color: primaryGreen),
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final box = GetStorage();
    final userData = box.read('salesRep');
    final currentUserName = userData?['name'] ?? 'User';

    return Scaffold(
      backgroundColor: cardBackground,
      appBar: AppBar(
        title: Row(
          children: [
            Container(
              decoration: GradientDecoration.goldCircular(),
              child: CircleAvatar(
                backgroundColor: Colors.transparent,
                child: Text(
                  currentUserName.isNotEmpty
                      ? currentUserName[0].toUpperCase()
                      : 'U',
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                GradientText(
                  currentUserName,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  'Leave Dashboard',
                  style: TextStyle(
                      fontSize: 12, color: Colors.white.withOpacity(0.8)),
                ),
              ],
            ),
          ],
        ),
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: goldGradient,
          ),
        ),
        backgroundColor: Colors.transparent,
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.sync, color: Colors.white),
            onPressed: () async {
              final box = GetStorage();
              final userId = box.read('userId');
              int? staffId;

              if (userId != null) {
                staffId =
                    userId is int ? userId : int.tryParse(userId.toString());
              } else {
                final userData = box.read('salesRep');
                if (userData is Map<String, dynamic> &&
                    userData['id'] != null) {
                  staffId = userData['id'] is int
                      ? userData['id']
                      : int.tryParse(userData['id'].toString());
                }
              }

              if (staffId != null && staffId != 0) {
                await LeaveBalanceService.syncLeaveBalances(
                    staffId, _currentYear);
                _loadDashboardData();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Leave balances synchronized successfully'),
                    backgroundColor: Colors.green,
                  ),
                );
              }
            },
            tooltip: 'Sync Balances',
          ),
          IconButton(
            icon: const Icon(Icons.refresh, color: Colors.white),
            onPressed: _loadDashboardData,
            tooltip: 'Refresh',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _error != null
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.error_outline,
                        size: 64,
                        color: Colors.red.withOpacity(0.5),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        _error!,
                        style: const TextStyle(color: Colors.red),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: _loadDashboardData,
                        child: const Text('Retry'),
                      ),
                    ],
                  ),
                )
              : RefreshIndicator(
                  onRefresh: _loadDashboardData,
                  child: CustomScrollView(
                    slivers: [
                      SliverToBoxAdapter(
                        child: _buildQuickStatsSection(),
                      ),
                      SliverToBoxAdapter(
                        child: Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 16),
                          child: Text(
                            'Leave Balances',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: primaryDark,
                            ),
                          ),
                        ),
                      ),
                      const SliverToBoxAdapter(child: SizedBox(height: 12)),
                      _leaveBalances.isEmpty
                          ? SliverToBoxAdapter(
                              child: Container(
                                margin: const EdgeInsets.all(16),
                                padding: const EdgeInsets.all(24),
                                decoration: BoxDecoration(
                                  color: pureWhite,
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(
                                      color: lightGray.withOpacity(0.3)),
                                ),
                                child: Column(
                                  children: [
                                    Icon(
                                      Icons.info_outline,
                                      size: 48,
                                      color: Colors.grey[400],
                                    ),
                                    const SizedBox(height: 16),
                                    Text(
                                      'No Leave Balances',
                                      style: TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.bold,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                    const SizedBox(height: 8),
                                    Text(
                                      'Your leave balances will appear here once configured.',
                                      style: TextStyle(
                                        color: Colors.grey[500],
                                        fontSize: 12,
                                      ),
                                      textAlign: TextAlign.center,
                                    ),
                                  ],
                                ),
                              ),
                            )
                          : SliverPadding(
                              padding:
                                  const EdgeInsets.symmetric(horizontal: 16),
                              sliver: SliverList(
                                delegate: SliverChildBuilderDelegate(
                                  (context, index) =>
                                      _buildCompactLeaveBalanceCard(
                                    _leaveBalances[index]['balance']
                                        as LeaveBalance,
                                    _leaveBalances[index]['leaveType']
                                        as LeaveType,
                                  ),
                                  childCount: _leaveBalances.length,
                                ),
                              ),
                            ),
                      SliverToBoxAdapter(
                        child: _buildActionButtons(),
                      ),
                    ],
                  ),
                ),
    );
  }
}
